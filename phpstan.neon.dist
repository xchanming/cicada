includes:
    - phpstan-baseline.neon
    - phpstan-v67-baseline.neon
    - src/Core/DevOps/StaticAnalyze/PHPStan/common.neon
    - src/Core/DevOps/StaticAnalyze/PHPStan/core-rules.neon

parameters:
    tmpDir: var/cache/phpstan
    paths:
        - src
        - tests

    bootstrapFiles:
        - src/Core/DevOps/StaticAnalyze/phpstan-bootstrap.php
    # run `php src/Core/DevOps/StaticAnalyze/phpstan-bootstrap.php` to create the container
    symfony:
        constantHassers: false
        containerXmlPath: 'var/cache/phpstan_dev/Cicada_Core_DevOps_StaticAnalyze_StaticAnalyzeKernelPhpstan_devDebugContainer.xml'
        consoleApplicationLoader: src/Core/DevOps/StaticAnalyze/console-application.php

    excludePaths:

        # vendor patches over autoload files
        - src/Core/Framework/Adapter/Doctrine/Patch/AbstractAsset.php

        # node_modules
        - src/**/node_modules/*
        - tests/**/node_modules/*

        # @todo NEXT-22697 - Remove when re-enabling cms-aware
        - src/Core/System/CustomEntity/Xml/Config/CustomEntityEnrichmentService.php
        - tests/integration/Core/System/CustomEntity/Xml/Config/CmsAwareAndAdminUiTest.php

        # PHPStan rule test files
        - tests/devops/Core/DevOps/StaticAnalyse/PHPStan/Rules/data/*

        # Compatibility traits for Redis can be removed, once we are requiring Redis 6.0.0
        - src/Core/Test/Stub/Redis/RedisCompatibility.php
        - src/Core/Test/Stub/Redis/RedisMultiCompatibility.php

    ignoreErrors:
        # The symfony extension checks against the "normal" container, not the test container
        # Therefore some services in the tests are not found and the extension can not infer that all private services are public during test execution
        -
            message: '#Service ".*" is not registered in the container\.#'
            paths:
                - tests/unit
                - tests/integration
                - src/Core/Framework/Test/TestCaseBase/*.php
        -
            message: '#Service ".*" is private#'
            paths:
                - tests/performance/**/*Bench.php
                - tests/unit/**/*Test.php
                - tests/devops/**/*Test.php
                - tests/migration/**/*Test.php
                - tests/integration/**/*Test.php
                - tests/integration/**/*TestCase.php

        - # ignore errors caused by static::markTestSkipped
            message: '#Unreachable statement - code above always terminates.#'
            paths:
                - tests/**/*Test.php

        # To fix this error, the \Cicada\Core\Framework\Struct\Collection::createNew method has to be implemented
        # in every implementation of `Collection` and needs to return `new self` instead of `new static`. See https://github.com/phpstan/phpstan/issues/2773
        -
            message: '#Unsafe usage of new static\(\)#'
            paths:
                - src/Core/Framework/Struct/Collection.php
                - src/Core/Framework/Rule/RuleCollection.php
                - src/Core/Framework/DataAbstractionLayer/CompiledFieldCollection.php

        # allowed extension of internal classes with @final annotation only for specific classes
        -
            message: '#.*extends @final class Cicada\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearchResult\.#'
            paths:
                - src/Core/Content/Product/SalesChannel/Listing/ProductListingResult.php
                - src/Core/Content/Product/SalesChannel/Review/ProductReviewResult.php
                - src/Storefront/Framework/Page/StorefrontSearchResult.php
        -
            message: '#.*extends @final class Cicada\\Core\\Framework\\DataAbstractionLayer\\EntityRepository.#'
            paths:
                - src/Core/Content/Test/ImportExport/MockRepository.php
                - src/Core/Test/Stub/DataAbstractionLayer/StaticEntityRepository.php
        - '#Class Cicada\\Tests\\Integration\\Elasticsearch\\Product\\EsAwareCriteria extends @final class Cicada\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria\.#'

        # Route scopes for controllers
        -
           message: '#.* has no route scope defined.*#'
           paths:
            - **/*Test.php
            - src/Core/Installer
            - src/Core/Checkout/Payment/Controller/PaymentController.php

        -
           message: '#No global Command directories allowed, put your commands in the right domain directory#'
           path: src/Administration/

        # dynamic hydrator performance
        -
            message: '#Access to an undefined property Cicada\\Core\\Framework\\DataAbstractionLayer\\Entity#'
            path: src/*/*Hydrator.php
        -
            message: '#Access to protected property *#'
            path: src/*/*Hydrator.php

        - # PhpStan cannot follow the referenced cursor
            message: "#^Variable \\$extensions in empty\\(\\) always exists and is always falsy\\.$#"
            count: 1
            path: src/Core/Framework/DataAbstractionLayer/VersionManager.php

        - # Invalid trait usage
            message: "#^Dead catch \\- ReflectionException is never thrown in the try block\\.$#"
            paths:
                - src/Core/Checkout/Cart/Error/Error.php
                - src/Core/Content/ProductExport/Error/Error.php

        # Internal deprecations of Cicada are handled in other places
        - '#deprecated.*(class|interface) Cicada\\#'

        - # tests are allowed to add dummy classes in the same file
            message: '#Multiple class\/interface\/trait is not allowed in single file#'
            paths:
                - src/**/Test/**
                - tests/**

        - # It explicitly tests array access on object, so it works from twig scripts
            message: "#Use explicit methods over array access on object$#"
            path: tests/unit/Core/Framework/Script/Service/ArrayFacadeTest.php

        - # Classes that are allowed to use dynamic property name access
            message: '#Use explicit names over dynamic ones#'
            paths:
                - src/Core/Checkout/Cart/LineItem/LineItem.php
                - src/Core/Checkout/Document/DocumentConfiguration.php
                - src/Core/Content/Product/Hook/Pricing/ProductProxy.php
                - src/Core/Framework/Api/ApiDefinition/Generator/StoreApiGenerator.php
                - src/Core/Framework/Struct/AssignArrayTrait.php
                - src/Core/Framework/Struct/CloneTrait.php
                - src/Core/Framework/Struct/CreateFromTrait.php
                - src/Core/Framework/App/Manifest/Xml/XmlElement.php
                - src/Core/Framework/App/Manifest/Xml/CustomField/CustomFieldTypes/SingleEntitySelectField.php
                - src/Core/Framework/App/Manifest/Xml/CustomField/CustomFieldTypes/SingleSelectField.php
                - src/Core/Framework/App/Payment/Response/AbstractResponse.php
                - src/Core/Framework/DataAbstractionLayer/Dbal/EntityHydrator.php
                - src/Core/Framework/DataAbstractionLayer/Entity.php
                - src/Core/Framework/DataAbstractionLayer/Util/AfterSort.php

        - # Can not be fixed currently. See https://github.com/phpstan/phpstan/discussions/9159
            message: '#Method Cicada\\Core\\Framework\\DataAbstractionLayer\\Field\\Field::getFlag\(\) should return \(TFlag of Cicada\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Flag\)\|null but returns Cicada\\Core\\Framework\\DataAbstractionLayer\\Field\\Flag\\Flag\|null#'
            path: src/Core/Framework/DataAbstractionLayer/Field/Field.php
            count: 1

        - # test plugin implementations in fixtures, the files can't be excluded as that would lead to errors when they are used
            message: '#.*#'
            paths:
                - src/Core/Framework/Test/Plugin/_fixture/plugins/*
                - src/Core/Framework/Test/Plugin/Requirement/_fixture/SwagRequirementValidTestExtension/*
                - tests/integration/Core/System/CustomEntity/Xml/Config/_fixtures/plugins/*
                - tests/integration/Core/Framework/Store/_fixtures/AppStoreTestPlugin/*
                - tests/integration/Core/Framework/Plugin/_fixtures/*

        - # Hard to fix, as no proper var annotation could be used within the while loop
            message: "#^Parameter \\#1 \\$mediaIds of method Cicada\\\\Core\\\\Content\\\\Media\\\\UnusedMediaPurger\\:\\:filterOutNewMedia\\(\\) expects array\\<string\\>, array\\<int, array\\<string, string\\>\\|string\\> given\\.$#"
            count: 1
            path: src/Core/Content/Media/UnusedMediaPurger.php

        # NEXT-29041 - Needs to be fixed with a script, rest goes to baseline
        - '#.* generic class Cicada\\Core\\Framework\\DataAbstractionLayer\\EntityRepository.*not specify its types: TEntityCollection#'
        - '#.* generic class Cicada\\Core\\System\\SalesChannel\\Entity\\SalesChannelRepository.*not specify its types: TEntityCollection#'

        - # No need to fix for now, as the facades are only used in twig context
            message: '#.* generic class Cicada\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearchResult.*does not specify its types: TEntityCollection#'
            paths:
                - src/Core/Framework/DataAbstractionLayer/Facade/RepositoryFacade.php
                - src/Core/Framework/DataAbstractionLayer/Facade/SalesChannelRepositoryFacade.php

        - # Needs a proper class-string annotation in `\Cicada\Core\Framework\DataAbstractionLayer\EntityDefinition::getCollectionClass` and all child classes
            message: '#PHPDoc tag @var with type .*Cicada\\Core\\Framework\\DataAbstractionLayer\\EntityCollection.* is not subtype of native type string#'
            paths:
                - src/Core/Framework/DataAbstractionLayer/Dbal/EntityReader.php
                - src/Core/Framework/DataAbstractionLayer/EntityRepository.php
                - src/Core/System/SalesChannel/Entity/SalesChannelRepository.php

        - # It is not possible to specify the type of the EntitySearchResult, as the CmsSlotDataResolver and the ElementDataCollection are used for multiple entities at the same time
            message: '#.* with generic class Cicada\\Core\\Framework\\DataAbstractionLayer\\EntityCollection.*not specify its types: TElement#'
            paths:
                - src/Core/Content/Cms/DataResolver/CmsSlotsDataResolver.php
                - src/Core/Content/Cms/DataResolver/Element/ElementDataCollection.php
        - '#Parameter \#2 \$entitySearchResult of method Cicada\\Core\\Content\\Cms\\DataResolver\\Element\\ElementDataCollection::add\(\) expects Cicada\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearchResult<Cicada\\Core\\Framework\\DataAbstractionLayer\\EntityCollection>, Cicada\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearchResult<Cicada\\.*Collection> given#'
        - # It is not possible to specify the type of the EntityResult, as the Aggregators are used for multiple entities at the same time
            message: '#Method Cicada\\.*::hydrateEntityAggregation\(\) return type with generic class Cicada\\Core\\Framework\\DataAbstractionLayer\\Search\\AggregationResult\\Metric\\EntityResult does not specify its types: TEntityCollection#'
            paths:
                - src/Core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php
                - src/Elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntityAggregatorHydrator.php

        - # For testing purpose this error can be ignored
            message: '#Cannot assign new offset to Cicada\\Core\\Framework\\Script\\Facade\\ArrayFacade#'
            path: tests/unit/Core/Framework/Script/Service/ArrayFacadeTest.php

        - # TestBuilders must not be internal
            message: '#must be flagged @internal to not be captured by the BC checker#'
            paths:
                - src/Core/Test/Integration/Builder

        - # those private methods are called from the trait "RedisCompatibility"
            message: '#Method Cicada\\Core\\Test\\Stub\\Redis\\RedisStub::do.*\(\) is unused#'
            path: src/Core/Test/Stub/Redis/RedisStub.php

        - # To not have a single case for each type, we check them dynamically.
            message: '#Use explicit names over dynamic ones#'
            count: 2
            path: src/Core/Framework/Validation/HappyPathValidator.php

        - # It is checked before if the entity supports custom fields, but it is not possible for PHPStan to recognize this
            message: '#Call to an undefined method TElement of Cicada\\Core\\Framework\\DataAbstractionLayer\\Entity::.*CustomFields.*\(\)#'
            count: 4
            path: src/Core/Framework/DataAbstractionLayer/EntityCollection.php

        # NEXT-33380 - Add support for dbal/doctrine 3.8.0, add profiling to get sql query parts from query builder without using deprecated methods getQueryPart or getQueryParts https://github.com/doctrine/dbal/pull/6179
        - """
            #^Call to deprecated method getQueryPart\\(\\) of class Doctrine\\\\DBAL\\\\Query\\\\QueryBuilder\\:
            The query parts are implementation details and should not be relied upon\\.$#
        """

        - # This test should ensure, that the default values are never changed
            message: '#Call to static method PHPUnit\\Framework\\Assert::assertSame\(\) with .* and .* will always evaluate to true.#'
            identifier: staticMethod.alreadyNarrowedType
            path: tests/devops/Core/DefaultsTest.php
