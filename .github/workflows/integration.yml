name: Integration tests

on:
  pull_request:
  workflow_dispatch:
    inputs:
      nightly:
        default: ""
  workflow_call:
    inputs:
      nightly:
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set timezone globally
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          sudo dpkg-reconfigure -f noninteractive tzdata
          date
  phpunit-matrix:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: generate-matrix
        run: |
          MATRIX=$(php .github/bin/generate-phpunit-matrix.php "${{ inputs.nightly }}")
          echo $MATRIX
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  phpunit:
    name: "${{ matrix.php}} ${{ matrix.test.testsuite }}${{ matrix.test.path }} ${{ matrix.db }}"
    needs:
      - phpunit-matrix
    runs-on: ubuntu-24.04
    strategy: ${{ fromJson(needs.phpunit-matrix.outputs.matrix) }}
    env:
      APP_ENV: test
      DATABASE_URL: mysql://root@127.0.0.1:3306/root
      APP_URL: http://localhost:8000
      APP_SECRET: def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48
      OPENSEARCH_URL: 127.0.0.1:9200
      BLUE_GREEN_DEPLOYMENT: 1
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
      COMPOSER_ROOT_VERSION: 6.6.9999999-dev

    services:
      elasticsearch:
        image: ${{ matrix.test.path != '' && 'opensearchproject/opensearch:1' || 'alpine' }}
        env:
          discovery.type: single-node
          plugins.security.disabled: "true"
        ports:
          - "9200:9200"
      database:
        image: ${{ matrix.db }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: cicada
        ports:
          - "3306:3306"
        options: --health-cmd="mysqladmin ping || mariadb-admin ping"
    steps:
      - name: Setup Cicada
        uses: xchanming/setup-cicada@main
        with:
          php-version: ${{ matrix.php }}
          mysql-version: 'skip'
          cicada-version: ${{ github.ref }}
          cicada-repository: ${{ github.repository }}

      - name: Start Webserver
        run: symfony server:start -d

      - name: Install Cicada
        run: php src/Core/TestBootstrap.php

      - name: Run PHPUnit testsuite
        if: ${{ matrix.test.testsuite != '' }}
        run: php -d memory_limit=-1 vendor/bin/phpunit --testsuite "${{ matrix.test.testsuite }}"

      - name: Run PHPUnit path
        if: ${{ matrix.test.path != '' }}
        run: php -d memory_limit=-1 vendor/bin/phpunit -- tests/integration/${{ matrix.test.path }}

  win-checkout:
    runs-on: windows-latest
    name: "Windows check"

    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone platform
        uses: actions/checkout@v4
  php-security:
    runs-on: ubuntu-24.04
    name: "Composer dependencies"
    env:
      COMPOSER_ROOT_VERSION: 6.6.9999999-dev
    steps:
      - name: Clone platform
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Install Composer
        run: |
          composer install --no-interaction --no-scripts
          curl --location --output local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_amd64
          echo 'e5b12488ca78bc07c149e9352278bf10667b88a8461caac10154f9a6f5476369  local-php-security-checker' > local-php-security-checker.sha256
          sha256sum --check local-php-security-checker.sha256
          chmod +x local-php-security-checker

      - name: Run on platform
        run: ./local-php-security-checker
  code-ql:
    name: Analyze
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  tested-update-versions:
    name: tested-versions
    runs-on: ubuntu-24.04
    outputs:
      first-version: ${{ steps.versions.outputs.first-version }}
      latest-version: ${{ steps.versions.outputs.latest-version }}
      lts-first-version: ${{ steps.versions.outputs.lts-first-version }}
      lts-latest-version: ${{ steps.versions.outputs.lts-latest-version }}
    steps:
      - name: Generate versions
        id: versions
        uses: xchanming/github-actions/versions@main

  blue-green-66-67:
    name: "PHP blue green 6.6 -> 6.7 -> 6.6"
    runs-on: ubuntu-24.04
    env:
      APP_ENV: test
      APP_URL: http://localhost:8000
      APP_SECRET: def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48
      OPENSEARCH_URL: 127.0.0.1:9200
      BLUE_GREEN_DEPLOYMENT: 1
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"

    services:
      elasticsearch:
        image: "opensearchproject/opensearch:1"
        env:
          discovery.type: single-node
          plugins.security.disabled: "true"
          TZ: Asia/Shanghai
        ports:
          - "9200:9200"

    steps:
      - name: Setup previous major version
        uses: xchanming/setup-cicada@main
        with:
          install: "false"
          cicada-version: ${{ github.ref }}
          cicada-repository: ${{ github.repository }}

      - name: Start Webserver
        run: symfony server:start -d

      - name: Install Cicada in previous major version on test DB
        if: ${{ contains(github.workflow_ref, 'nightly') }}
        run: composer init:testdb

      - name: Run next major migrations on test DB
        if: ${{ contains(github.workflow_ref, 'nightly') }}
        run: DATABASE_URL="mysql://root@127.0.0.1:3306/cicada_test" bin/console database:migrate --all core.V6_7

      - name: Run integration tests
        if: ${{ contains(github.workflow_ref, 'nightly') }}
        run: php -d memory_limit=-1 vendor/bin/phpunit --testsuite "integration" --exclude-group=needsWebserver,skip-paratest,not-deterministic --stop-on-error --stop-on-failure

      - name: Install Cicada in previous major version
        if: ${{ !contains(github.workflow_ref, 'nightly') }}
        run: bin/console system:install --basic-setup --create-database --skip-assets-install

      - name: Run next major migrations
        if: ${{ !contains(github.workflow_ref, 'nightly') }}
        run: bin/console database:migrate --all core.V6_7

      - name: Run blue-green check
        if: ${{ !contains(github.workflow_ref, 'nightly') }}
        run: php .github/bin/blue-green-check.php # TODO: Move script to .github after migration

  # this allows us to specifiy just one required job/check
  # this is not practical with matrix jobs directly, because you've to specify all permutations
  check:
    if: always()
    needs:
      - phpunit
      - win-checkout
      - code-ql
      - blue-green-66-67

    runs-on: Ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          # allowed-failures: docs, linters
          # allowed-skips: non-voting-flaky-job
          jobs: ${{ toJSON(needs) }}
